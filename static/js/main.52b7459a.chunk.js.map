{"version":3,"sources":["components/BottomNavbar/BottomNavbar.js","components/TopNavbar/TopNavbar.js","components/VerticalBar/VerticalBar.js","algorithms/insertionSort.js","algorithms/bubbleSort.js","algorithms/mergeSort.js","algorithms/quickSort.js","algorithms/countingSort.js","containers/Dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["BottomNavbar","className","id","TopNavbar","style","marginBottom","margin","verticalBar","props","value","type","height","insertionSort","generatedNumbers","Promise","resolve","reject","animations","numbers","len","length","i","key","j","push","first","second","bubbleSort","sortedByIndex","tmp","mergeSortHelper","mainArray","startIdx","endIdx","auxiliaryArray","middleIdx","Math","floor","k","pos","val","doMerge","mergeSort","array","slice","quickSort","quickSortHelper","start","end","pIndex","pivot","partition","countingSort","arr","maxValue","max","maxValueInArray","count","output","idxValue","Dashboard","a","setState","enableButtons","state","then","err","animateSorting","bubblesort","loc","anim","animateMerge","delay","renderGuiBars","renderedVerticalBars","map","idx","generateNumbers","arrLenght","arrMaxValue","arrMinValue","getRand","generateBars","swapA","swapB","idxSorted","generateBarsMerge","newVal","min","random","ms","res","setTimeout","this","onClick","disabled","url","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.52b7459a.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./BottomNavbar.css\";\n\nconst BottomNavbar = () => {\n    return (\n        <nav className=\"navbar fixed-bottom navbar-expand-lg navbar-light bgColor\">\n            <div\n                className=\"collapse navbar-collapse justify-content-center\"\n                id=\"navbarNav\"\n            >\n                <p className=\"text txtCenter\">\n                    Sorting Visualizer\n                    <br />\n                    fabio@chiarani.it ~ github.com/Xiryl\n                </p>\n            </div>\n        </nav>\n    );\n};\n\nexport default BottomNavbar;\n","import React from \"react\";\nimport \"./TopNavbar.css\";\n\nconst TopNavbar = () => {\n    return (\n        <nav\n            className=\"navbar navbar-expand-lg navbar-light bg-light\"\n            style={{ marginBottom: \"16px\" }}\n        >\n            <div\n                className=\"collapse navbar-collapse justify-content-center\"\n                id=\"navbarNav\"\n            >\n                <p className=\"txtCenter\" style={{ margin: \"0px\" }}>\n                    Generate a random array and choose and algorithm to sort it!\n                </p>\n            </div>\n        </nav>\n    );\n};\n\nexport default TopNavbar;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./VerticalBar.css\";\n\nconst verticalBar = (props) => {\n    const { value, type } = props;\n\n    if (type === \"selected\") {\n        return (\n            <div className=\"BarSelected\" style={{ height: `${value * 5}px` }}>\n                &nbsp;\n            </div>\n        );\n    }\n    if (type === \"sorted\") {\n        return (\n            <div className=\"BarSorted\" style={{ height: `${value * 5}px` }}>\n                &nbsp;\n            </div>\n        );\n    }\n    if (type === \"swapped\") {\n        return (\n            <div className=\"BarSwapped\" style={{ height: `${value * 5}px` }}>\n                &nbsp;\n            </div>\n        );\n    }\n    return (\n        <div className=\"Bar\" style={{ height: `${value * 5}px` }}>\n            &nbsp;\n        </div>\n    );\n};\n\nverticalBar.propTypes = {\n    value: PropTypes.number.isRequired,\n    type: PropTypes.string.isRequired,\n};\n\nexport default verticalBar;\n","/* eslint-disable prefer-promise-reject-errors */\nconst insertionSort = (generatedNumbers) =>\n    new Promise((resolve, reject) => {\n        const animations = [];\n        const numbers = [...generatedNumbers];\n\n        const len = numbers.length;\n\n        for (let i = 1; i < len; i += 1) {\n            const key = numbers[i];\n            let j = i - 1;\n\n            while (j >= 0 && numbers[j] > key) {\n                // uncomment for preview the comparison\n                // animations.push({\n                //     type: \"comparison\",\n                //     first: j,\n                //     second: i,\n                // });\n\n                animations.push({\n                    type: \"swap\",\n                    first: j + 1,\n                    second: j,\n                });\n\n                numbers[j + 1] = numbers[j];\n                j -= 1;\n            }\n            numbers[j + 1] = key;\n        }\n\n        if (animations.length >= 2) {\n            resolve(animations);\n        } else {\n            reject(-1);\n        }\n    });\n\nexport default insertionSort;\n","/* eslint-disable prefer-promise-reject-errors */\nconst bubbleSort = (generatedNumbers) =>\n    new Promise((resolve, reject) => {\n        const animations = [];\n        const numbers = [...generatedNumbers];\n\n        const len = numbers.length;\n\n        for (let i = 0; i < len - 1; i += 1) {\n            for (let j = 0; j < len - 1 - i; j += 1) {\n                // animations.push({\n                //     type: \"comparison\",\n                //     first: j,\n                //     second: j + 1,\n                //      sortedByIndex: len - 1 - i,\n                // });\n\n                if (numbers[j] > numbers[j + 1]) {\n                    animations.push({\n                        type: \"swap\",\n                        first: j + 1,\n                        second: j,\n                        sortedByIndex: len - 1 - i,\n                    });\n\n                    const tmp = numbers[j + 1];\n                    numbers[j + 1] = numbers[j];\n                    numbers[j] = tmp;\n                }\n            }\n        }\n\n        if (animations.length >= 2) {\n            resolve(animations);\n        } else {\n            reject(-1);\n        }\n    });\n\nexport default bubbleSort;\n","/* eslint-disable prefer-promise-reject-errors */\nconst mergeSort = (array) => {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n};\n\nconst doMerge = (\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations\n) => {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n            animations.push({\n                type: \"swap\",\n                pos: k,\n                val: auxiliaryArray[i],\n            });\n\n            mainArray[k++] = auxiliaryArray[i++];\n        } else {\n            animations.push({\n                type: \"swap\",\n                pos: k,\n                val: auxiliaryArray[j],\n            });\n            mainArray[k++] = auxiliaryArray[j++];\n        }\n    }\n    while (i <= middleIdx) {\n        animations.push({\n            type: \"swap\",\n            pos: k,\n            val: auxiliaryArray[i],\n        });\n        mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n        animations.push({\n            type: \"swap\",\n            pos: k,\n            val: auxiliaryArray[j],\n        });\n        mainArray[k++] = auxiliaryArray[j++];\n    }\n};\n\nconst mergeSortHelper = (\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations\n) => {\n    if (startIdx === endIdx) {\n        return;\n    }\n\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(\n        auxiliaryArray,\n        middleIdx + 1,\n        endIdx,\n        mainArray,\n        animations\n    );\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n};\n\nexport default mergeSort;\n","const partition = (array, start, end, animations) => {\n    const pivot = array[end]; // assume the pivot is the last element\n    let pIndex = start;\n\n    // move all elements less than pivot on the left\n    for (let i = start; i <= end - 1; i += 1) {\n        if (array[i] <= pivot) {\n            // swap\n            const tmp = array[i];\n\n            animations.push({\n                type: \"swap\",\n                pivot,\n                first: i,\n                second: pIndex,\n            });\n\n            array[i] = array[pIndex];\n            array[pIndex] = tmp;\n\n            // increment pIndex\n            pIndex += 1;\n        }\n    }\n\n    // move pivot on the pIndex\n    // swap\n    const tmp = array[pIndex];\n\n    animations.push({\n        type: \"swap\",\n        pivot,\n        first: pIndex,\n        second: end,\n    });\n\n    array[pIndex] = pivot;\n    array[end] = tmp;\n\n    // return partition index\n    return pIndex;\n};\n\nconst quickSortHelper = (array, start, end, animations) => {\n    if (start < end) {\n        const pIndex = partition(array, start, end, animations);\n        quickSortHelper(array, start, pIndex - 1, animations); // sort left part\n        quickSortHelper(array, pIndex + 1, end, animations); // sort right part\n    }\n};\n\nconst quickSort = (array) => {\n    const animations = [];\n    quickSortHelper(array, 0, array.length - 1, animations);\n    return animations;\n};\n\nexport default quickSort;\n","const maxValueInArray = (arr) => {\n    let max = -1;\n    for (let i = 0; i < arr.length; i += 1) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n};\n\nconst countingSort = (arr) => {\n    const animations = [];\n    const len = arr.length;\n    const maxValue = maxValueInArray(arr);\n\n    const count = [];\n    for (let i = 0; i <= maxValue; i += 1) {\n        count.push(0);\n    }\n    const output = [...arr];\n\n    // count occurrence on corrisponding index\n    for (let i = 0; i < len; i += 1) {\n        const idx = arr[i];\n        count[idx] += 1;\n        // first scan\n        animations.push({\n            type: \"comparison\",\n            pos: i,\n            val: i,\n        });\n    }\n\n    // add the previous count to the actual\n    for (let i = 1; i <= maxValue; i += 1) {\n        // second scan\n        animations.push({\n            type: \"comparison\",\n            pos: i,\n            val: i - 1,\n        });\n        count[i] += count[i - 1];\n    }\n\n    // sort\n    for (let i = len - 1; i >= 0; i -= 1) {\n        const idxValue = arr[i];\n        const pos = count[idxValue] - 1;\n        animations.push({\n            type: \"swap\",\n            pos,\n            val: arr[i],\n        });\n        output[count[idxValue] - 1] = arr[i];\n        count[arr[i]] -= 1; // number taken\n    }\n\n    return animations;\n};\n\nexport default countingSort;\n","import React, { Component } from \"react\";\n\nimport GithubCorner from \"react-github-corners\";\nimport VerticalBar from \"../../components/VerticalBar/VerticalBar\";\n\nimport insertionSort from \"../../algorithms/insertionSort\";\nimport bubbleSort from \"../../algorithms/bubbleSort\";\nimport mergeSort from \"../../algorithms/mergeSort\";\nimport quickSort from \"../../algorithms/quickSort\";\nimport countingSort from \"../../algorithms/countingSort\";\n\nimport \"react-github-corners/dist/GithubCorner.css\";\n\nimport \"./Dashboard.css\";\n\nclass Dashboard extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            generatedNumbers: [],\n            renderedVerticalBars: [],\n            arrLenght: 80,\n            arrMinValue: 5,\n            arrMaxValue: 100,\n            enableButtons: true,\n        };\n    }\n\n    componentDidMount() {\n        this.generateNumbers();\n    }\n\n    insertionSort = async () => {\n        this.setState({ enableButtons: false });\n        const { generatedNumbers } = this.state;\n        insertionSort(generatedNumbers).then((animations, err) => {\n            if (err) {\n                // todo: popup an error\n            }\n\n            this.animateSorting(animations);\n        });\n    };\n\n    bubblesort = () => {\n        this.setState({ enableButtons: false });\n        const { generatedNumbers } = this.state;\n        bubbleSort(generatedNumbers).then((animations, err) => {\n            if (err) {\n                // todo: popup an error\n            }\n\n            this.animateSorting(animations);\n        });\n    };\n\n    mergeSort = async () => {\n        this.setState({ enableButtons: false });\n        const { generatedNumbers } = this.state;\n        const loc = [...generatedNumbers];\n        const anim = await mergeSort(loc);\n        this.animateMerge(anim);\n    };\n\n    quickSort = async () => {\n        this.setState({ enableButtons: false });\n        const { generatedNumbers } = this.state;\n        const loc = [...generatedNumbers];\n        const anim = await quickSort(loc);\n        this.animateSorting(anim);\n    };\n\n    countingSort = async () => {\n        this.setState({ enableButtons: false });\n        const { generatedNumbers } = this.state;\n        const loc = [...generatedNumbers];\n        const anim = await countingSort(loc);\n        this.animateMerge(anim);\n    };\n\n    animateSorting = async (animations) => {\n        const { generatedNumbers } = this.state;\n\n        for (let i = 0; i < animations.length; i += 1) {\n            await this.delay(10);\n\n            const { type, first, second, sortedByIndex, pivot } = animations[i];\n            if (type === \"comparison\") {\n                this.renderGuiBars(type, first, second);\n            } else {\n                const tmp = generatedNumbers[second];\n                generatedNumbers[second] = generatedNumbers[first];\n                generatedNumbers[first] = tmp;\n                this.renderGuiBars(type, first, second, sortedByIndex, pivot);\n            }\n        }\n        this.setState({ enableButtons: true });\n    };\n\n    renderGuiBars = (type, first, second, sortedByIndex, pivot) => {\n        const { generatedNumbers } = this.state;\n        let { renderedVerticalBars } = this.state;\n\n        if (type === \"comparison\") {\n            renderedVerticalBars = generatedNumbers.map((val, idx) => {\n                if (idx === first || idx === second) {\n                    return (\n                        // Render vertical bar with a different color for indicating a comparison between the two elemnts\n                        <VerticalBar key={idx} value={val} type=\"selected\" />\n                    );\n                }\n                if (idx > sortedByIndex) {\n                    return (\n                        // this part of array is sorted (bubblesort)\n                        <VerticalBar key={idx} value={val} type=\"sorted\" />\n                    );\n                }\n                if (idx === pivot) {\n                    return (\n                        // this bar is the pivot (quicksort)\n                        <VerticalBar key={idx} value={val} type=\"sorted\" />\n                    );\n                }\n                // render as normal\n                return <VerticalBar key={idx} value={val} />;\n            });\n        } else {\n            renderedVerticalBars = generatedNumbers.map((val, idx) => {\n                if (idx === first || idx === second) {\n                    return (\n                        // Render vertical bar with a different color for indicating a comparison between the two elemnts\n                        <VerticalBar key={idx} value={val} type=\"swapped\" />\n                    );\n                }\n                if (idx > sortedByIndex) {\n                    return (\n                        // this part of array is sorted (bubblesort)\n                        <VerticalBar key={idx} value={val} type=\"sorted\" />\n                    );\n                }\n                if (idx === pivot) {\n                    return (\n                        // this bar is the pivot (quicksort)\n                        <VerticalBar key={idx} value={val} type=\"sorted\" />\n                    );\n                }\n                // render as normal\n                return <VerticalBar key={idx} value={val} />;\n            });\n        }\n\n        this.setState({\n            renderedVerticalBars,\n        });\n    };\n\n    generateNumbers = () => {\n        const { arrLenght, arrMaxValue, arrMinValue } = this.state;\n        const val = [];\n\n        for (let i = 0; i <= arrLenght; i += 1) {\n            val.push(this.getRand(arrMinValue, arrMaxValue));\n        }\n\n        this.setState(\n            {\n                generatedNumbers: val,\n            },\n            () => this.generateBars()\n        );\n    };\n\n    generateBars = (swapA, swapB, idxSorted) => {\n        const { generatedNumbers } = this.state;\n        let { renderedVerticalBars } = this.state;\n\n        if (swapA && swapB) {\n            renderedVerticalBars = generatedNumbers.map((val, idx) => {\n                if (idx === swapA || idx === swapB) {\n                    return (\n                        <VerticalBar key={idx} value={val} type=\"selected\" />\n                    );\n                }\n                if (idx > idxSorted) {\n                    return <VerticalBar key={idx} value={val} type=\"sorted\" />;\n                }\n                return <VerticalBar key={idx} value={val} />;\n            });\n        } else {\n            renderedVerticalBars = generatedNumbers.map((val, idx) => {\n                return <VerticalBar key={idx} value={val} />;\n            });\n        }\n\n        this.setState({\n            renderedVerticalBars,\n        });\n    };\n\n    generateBarsMerge = (type, pos, newVal) => {\n        const { generatedNumbers } = this.state;\n        let { renderedVerticalBars } = this.state;\n\n        if (type === \"comparison\") {\n            renderedVerticalBars = generatedNumbers.map((val, idx) => {\n                if (idx === pos || idx === newVal) {\n                    return (\n                        <VerticalBar key={idx} value={newVal} type=\"selected\" />\n                    );\n                }\n                return <VerticalBar key={idx} value={val} />;\n            });\n        }\n        renderedVerticalBars = generatedNumbers.map((val, idx) => {\n            if (idx === pos) {\n                return <VerticalBar key={idx} value={newVal} type=\"selected\" />;\n            }\n            return <VerticalBar key={idx} value={val} />;\n        });\n\n        this.setState({\n            renderedVerticalBars,\n        });\n    };\n\n    getRand = (min, max) => {\n        // https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range\n        return Math.floor(Math.random() * (max - min) + min);\n    };\n\n    delay = (ms) => new Promise((res) => setTimeout(res, ms));\n\n    animateMerge = async (animations) => {\n        const { generatedNumbers } = this.state;\n\n        for (let i = 0; i < animations.length; i += 1) {\n            await this.delay(0);\n            const { type, val, pos } = animations[i];\n            if (type === \"swap\") {\n                generatedNumbers[pos] = val;\n            }\n            this.generateBarsMerge(type, pos, val);\n        }\n        this.setState({ enableButtons: true });\n    };\n\n    render() {\n        return (\n            <>\n                <div className=\"container\">\n                    <div className=\"d-flex justify-content-center\">\n                        {this.state.enableButtons ? (\n                            <div>\n                                <button\n                                    className=\"btnGenerate\"\n                                    type=\"button\"\n                                    onClick={this.generateNumbers}\n                                >\n                                    Generate Array\n                                </button>\n                                <button\n                                    type=\"button\"\n                                    className=\"btnSort\"\n                                    onClick={this.insertionSort}\n                                >\n                                    Insertion Sort\n                                </button>\n                                <button\n                                    type=\"button\"\n                                    className=\"btnSort\"\n                                    onClick={this.bubblesort}\n                                >\n                                    Bubble Sort\n                                </button>\n                                <button\n                                    type=\"button\"\n                                    className=\"btnSort\"\n                                    onClick={this.mergeSort}\n                                >\n                                    Merge Sort\n                                </button>\n                                <button\n                                    type=\"button\"\n                                    className=\"btnSort\"\n                                    onClick={this.quickSort}\n                                >\n                                    Quick Sort\n                                </button>\n                                <button\n                                    type=\"button\"\n                                    className=\"btnSort\"\n                                    onClick={this.countingSort}\n                                >\n                                    Counting Sort\n                                </button>\n                            </div>\n                        ) : (\n                            <div>\n                                <button\n                                    className=\"btnGenerate\"\n                                    type=\"button\"\n                                    onClick={this.generateNumbers}\n                                    disabled\n                                >\n                                    Generate Array\n                                </button>\n                                <button\n                                    type=\"button\"\n                                    className=\"btnSort\"\n                                    onClick={this.insertionSort}\n                                    disabled\n                                >\n                                    Insertion Sort\n                                </button>\n                                <button\n                                    type=\"button\"\n                                    className=\"btnSort\"\n                                    onClick={this.bubblesort}\n                                    disabled\n                                >\n                                    Bubble Sort\n                                </button>\n                                <button\n                                    type=\"button\"\n                                    className=\"btnSort\"\n                                    onClick={this.mergeSort}\n                                    disabled\n                                >\n                                    Merge Sort\n                                </button>\n                                <button\n                                    type=\"button\"\n                                    className=\"btnSort\"\n                                    onClick={this.quickSort}\n                                    disabled\n                                >\n                                    Quick Sort\n                                </button>\n                                <button\n                                    type=\"button\"\n                                    className=\"btnSort\"\n                                    onClick={this.countingSort}\n                                    disabled\n                                >\n                                    Counting Sort\n                                </button>\n                            </div>\n                        )}\n                    </div>\n                </div>\n                <div\n                    className=\"container fixed-bottom\"\n                    style={{ marginBottom: \"100px\" }}\n                >\n                    <div className=\"d-flex flex-row align-items-end justify-content-center\">\n                        {this.state.renderedVerticalBars}\n                    </div>\n                </div>\n\n                <GithubCorner url=\"https://github.com/Xiryl/algo-sorting\" />\n            </>\n        );\n    }\n}\n\nexport default Dashboard;\n","import React from \"react\";\n\nimport BottomNavbar from \"./components/BottomNavbar/BottomNavbar\";\nimport TopNavbar from \"./components/TopNavbar/TopNavbar\";\nimport Dashboard from \"./containers/Dashboard/Dashboard\";\n\nimport \"./App.css\";\n\nfunction App() {\n    return (\n        <>\n            <TopNavbar />\n            <Dashboard />\n            <BottomNavbar />\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}